---
title: Get started
vignette: >
  %\VignetteIndexEntry{rtyp}
  %\VignetteEngine{quarto::html}
  %\VignetteEncoding{UTF-8}
knitr:
  opts_chunk:
    collapse: true
    comment: '#>'
    message: false
---

`{rtyp}` is an R package designed to generate **markup Typst code**. You can use it as is, but it also works well with [Quarto](https://quarto.org/).

At the moment, it supports most Typst functions, types, colors, alignment, and units with a very simple syntax, but it is not yet fully functional.

## Installation

You can install it with:

```r
remotes::install_github("y-sunflower/rtyp")
```

## Quick start

```{r}
library(rtyp)
```

All functions accept any kind of positional or named arguments:

```{r}
heading(level = 2, "A title")

text(weight = 500, "Some text")
```

However, in Typst, not all functions behave the same way regarding positional and named arguments. For this reason, `{rtyp}` adjusts the behavior when necessary.

For example, the `list_()` function will put everything in a list format:

```{r}
list_(tight = FALSE, "hey", "you", "!")
```

> Note that the function is `list_()` and not `list()` because `list()` is a base R function.

The same applies to the `table_()` function:

```{r}
table_("hey", "you", "!")
```

## Typst units

Typst uses a unique approach for units, as they are not quoted.

`{rtyp}` provides several utility functions to make working with Typst units easy:

```{r}
text(size = pt(20), "Ice cream")
```

This works with all Typst units:

```{r}
image("image.png", width = percent(80))
```

## Typst colors

Typst offers a large set of predefined colors such as `red` or `blue`. `{rtyp}` provides the same:

```{r}
text(fill = green, "Green text")
```

All built-in Typst colors are available in `{rtyp}`. You can find them [here](../reference/typst_colors.html).

## Typst alignment

Similarly to colors, Typst includes specific objects for alignment. They work well in `{rtyp}`:

```{r}
place(
  center,
  dy = pt(15),
  "hello"
)
```

You can combine them to mimic Typst syntax:

```{r}
place(
  top + left,
  dy = pt(15),
  "hello"
)
```

You can even combine them with colors, which is often useful for strokes:

```{r}
line(stroke = pt(2) + blue)
```

## Convert R types to Typst types

`{rtyp}` converts some R types into Typst types:

- `NULL` becomes `none`

```{r}
image("image.png", width = percent(80), alt = NULL)
```

- `TRUE`/`FALSE` become `true`/`false`

```{r}
list_(tight = FALSE, "hey", "you")
```

- `c()` vectors and unnamed `list()` (such as `list("a", "b"`) become arrays:

```{r}
text(`stylistic-set` = c(1, 2, 3), "10 years ago")

text(`stylistic-set` = list(1, 2, 3), "10 years ago") # equivalent
```

- Named `list()` (such as `list(a = "hello", b = "world")`) become dictionnaries:

```{r}
text(costs = list(hyphenation = percent(100), runt = percent(100)))
```

> Note that the goal here is **only** to translate R data types that have an equivalent in Typst, **not to be exhaustive**.

Other Typst types that still need to be implemented:

- label
- others?

## Nested function calls

Calling a function within another function works as well:

```{r}
place(
  center + horizon,
  dy = pt(15),
  square(size = pt(35), fill = red)
)
```
