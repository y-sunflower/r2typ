[{"path":"https://y-sunflower.github.io/rtyp/articles/rtyp.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Get started","text":"can install :","code":"remotes::install_github(\"y-sunflower/rtyp\")"},{"path":"https://y-sunflower.github.io/rtyp/articles/rtyp.html","id":"quick-start","dir":"Articles","previous_headings":"","what":"Quick start","title":"Get started","text":"functions accept kind positional named arguments: However, Typst, functions behave way regarding positional named arguments. reason, rtyp adjusts behavior necessary. example, list_() function put everything list format: Note function list_() list() list() base R function. applies table_() function:","code":"library(rtyp) heading(level = 2, \"A title\") #> [1] \"#heading(level: 2)[A title]\"  text(weight = 500, \"Some text\") #> [1] \"#text(weight: 500)[Some text]\" list_(tight = FALSE, \"hey\", \"you\", \"!\") #> [1] \"#list(tight: false, [hey], [you], [!])\" table_(\"hey\", \"you\", \"!\") #> [1] \"#table([hey], [you], [!])\""},{"path":"https://y-sunflower.github.io/rtyp/articles/rtyp.html","id":"typst-units","dir":"Articles","previous_headings":"","what":"Typst units","title":"Get started","text":"Typst uses unique approach units, quoted. rtyp provides several utility functions make working Typst units easy: works Typst units:","code":"text(size = pt(20), \"Ice cream\") #> [1] \"#text(size: 20pt)[Ice cream]\" image(\"image.png\", width = percent(80)) #> [1] \"#image(width: 80%, \\\"image.png\\\")\""},{"path":"https://y-sunflower.github.io/rtyp/articles/rtyp.html","id":"typst-colors","dir":"Articles","previous_headings":"","what":"Typst colors","title":"Get started","text":"Typst offers large set predefined colors red blue. rtyp provides : built-Typst colors available rtyp. can find .","code":"text(fill = green, \"Green text\") #> [1] \"#text(fill: green)[Green text]\""},{"path":"https://y-sunflower.github.io/rtyp/articles/rtyp.html","id":"typst-alignment","dir":"Articles","previous_headings":"","what":"Typst alignment","title":"Get started","text":"Similarly colors, Typst includes specific objects alignment. work well rtyp: can combine mimic Typst syntax: can even combine colors, often useful strokes:","code":"place(   center,   dy = pt(15),   \"hello\" ) #> [1] \"#place(center, dy: 15pt)[hello]\" place(   top + left,   dy = pt(15),   \"hello\" ) #> [1] \"#place(top + left, dy: 15pt)[hello]\" line(stroke = pt(2) + blue) #> [1] \"#line(stroke: 2pt + blue)\""},{"path":"https://y-sunflower.github.io/rtyp/articles/rtyp.html","id":"convert-r-types-to-typst-types","dir":"Articles","previous_headings":"","what":"Convert R types to Typst types","title":"Get started","text":"rtyp converts R types Typst types: NULL becomes none TRUE/FALSE become true/false c() vectors unnamed list() (list(\"\", \"b\") become arrays: Named list() (list(= \"hello\", b = \"world\")) become dictionnaries: Note goal translate R data types equivalent Typst, exhaustive. Typst types still need implemented: label others?","code":"image(\"image.png\", width = percent(80), alt = NULL) #> [1] \"#image(width: 80%, alt: none, \\\"image.png\\\")\" list_(tight = FALSE, \"hey\", \"you\") #> [1] \"#list(tight: false, [hey], [you])\" text(`stylistic-set` = c(1, 2, 3), \"10 years ago\") #> [1] \"#text(stylistic-set: (1, 2, 3))[10 years ago]\" text(`stylistic-set` = list(1, 2, 3), \"10 years ago\") # equivalent #> [1] \"#text(stylistic-set: (1, 2, 3))[10 years ago]\" text(costs = list(hyphenation = percent(100), runt = percent(100))) #> [1] \"#text(costs: (hyphenation: 100%, runt: 100%))\""},{"path":"https://y-sunflower.github.io/rtyp/articles/rtyp.html","id":"nested-function-calls","dir":"Articles","previous_headings":"","what":"Nested function calls","title":"Get started","text":"Calling function within another function works well:","code":"place(   center + horizon,   dy = pt(15),   square(size = pt(35), fill = red) ) #> [1] \"#place(center + horizon, dy: 15pt)[#square(size: 35pt, fill: red)]\""},{"path":"https://y-sunflower.github.io/rtyp/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Joseph Barbier. Author, maintainer.","code":""},{"path":"https://y-sunflower.github.io/rtyp/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Barbier J (2025). rtyp: R Package Generating Typst Markup Code. R package version 0.0.2, https://y-sunflower.github.io/rtyp/.","code":"@Manual{,   title = {rtyp: An R Package For Generating Typst Markup Code},   author = {Joseph Barbier},   year = {2025},   note = {R package version 0.0.2},   url = {https://y-sunflower.github.io/rtyp/}, }"},{"path":"https://y-sunflower.github.io/rtyp/index.html","id":"rtyp-an-r-package-for-generating-typst-markup-code","dir":"","previous_headings":"","what":"An R Package For Generating Typst Markup Code","title":"An R Package For Generating Typst Markup Code","text":"rtyp, can dynamically generate Typst code. supports: basic Typst functions set rules conversions R types Typst (NULL -> none, TRUE -> true, etc.) Typst units helper functions Typst colors natively Typst alignment natively extremely simple syntax zero dependencies Check documentation. [!WARNING]functional yet","code":""},{"path":"https://y-sunflower.github.io/rtyp/index.html","id":"quick-start","dir":"","previous_headings":"","what":"Quick start","title":"An R Package For Generating Typst Markup Code","text":"","code":"library(rtyp)  heading(level = 2, numbering = \"1.1\", \"Hello world\") > #heading(level: 2, numbering: \"1.1\")[Hello world]  text(size = pt(12), baseline = em(1.2), overhang = FALSE, \"hey there\") > #text(size: 12pt, baseline: 1.2em, overhang: false)[hey there]  image(width = percent(80), height = \"auto\", \"link.svg\") > #image(width: 80%, height: auto, \"link.svg\")  circle(fill = blue, \"hey\") > #circle(fill: blue)[hey]  circle(radius = pt(100), \"hey\", linebreak(), \"there\") > #circle(radius: 100pt)[hey #linebreak() there]  place(top + left, dy = pt(15), square(size = pt(35), fill = red)) > #place(top + left, dy: 15pt)[#square(size: 35pt, fill: red)]"},{"path":"https://y-sunflower.github.io/rtyp/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"An R Package For Generating Typst Markup Code","text":"","code":"remotes::install_github(\"y-sunflower/rtyp\")"},{"path":"https://y-sunflower.github.io/rtyp/index.html","id":"writing-and-compiling","dir":"","previous_headings":"","what":"Writing and compiling","title":"An R Package For Generating Typst Markup Code","text":"want write compile typst files R, check {typr} package.","code":""},{"path":"https://y-sunflower.github.io/rtyp/index.html","id":"missing-functions","dir":"","previous_headings":"","what":"Missing functions","title":"An R Package For Generating Typst Markup Code","text":"✅ Text ✅ Foundations ❌ cite: https://typst.app/docs/reference/model/cite/ ❌ link: https://typst.app/docs/reference/model/link/ ❌ numbering: https://typst.app/docs/reference/model/numbering/ ❌ ref: https://typst.app/docs/reference/model/ref/ ❌ terms: https://typst.app/docs/reference/model/terms/ ❌ curve: https://typst.app/docs/reference/visualize/curve/ ❌ gradient: https://typst.app/docs/reference/visualize/gradient/ ❌ path: https://typst.app/docs/reference/visualize/path/ ❌ stroke: https://typst.app/docs/reference/visualize/stroke/ ❌ polygon: https://typst.app/docs/reference/visualize/polygon/ ❌ tiling: https://typst.app/docs/reference/visualize/tiling/ ❌ Math ❌ Layout something’s missing? Please open issue!","code":""},{"path":"https://y-sunflower.github.io/rtyp/reference/as_raw_typ.html","id":null,"dir":"Reference","previous_headings":"","what":"Raw blocks for Quarto — as_raw_typ","title":"Raw blocks for Quarto — as_raw_typ","text":"Convert raw Typst Quarto. Using function required include output {rtyp} document.","code":""},{"path":"https://y-sunflower.github.io/rtyp/reference/as_raw_typ.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Raw blocks for Quarto — as_raw_typ","text":"","code":"as_raw_typ(x)"},{"path":"https://y-sunflower.github.io/rtyp/reference/as_raw_typ.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Raw blocks for Quarto — as_raw_typ","text":"x character vector interpret raw typst.","code":""},{"path":"https://y-sunflower.github.io/rtyp/reference/as_raw_typ.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Raw blocks for Quarto — as_raw_typ","text":"raw version, wrapped expected format Quarto document.","code":""},{"path":"https://y-sunflower.github.io/rtyp/reference/as_raw_typ.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Raw blocks for Quarto — as_raw_typ","text":"","code":"heading(level = 2, numbering = \"1.1\", \"Hello world\") |> as_raw_typ() #> [1] \"\\n```{=typst}\\n#heading(level: 2, numbering: \\\"1.1\\\")[Hello world]\\n```\\n\" #> attr(,\"class\") #> [1] \"knit_asis\" #> attr(,\"knit_cacheable\") #> [1] NA  typ_markup <- heading(level = 2, numbering = \"1.1\", \"Hello world\") as_raw_typ(typ_markup) #> [1] \"\\n```{=typst}\\n#heading(level: 2, numbering: \\\"1.1\\\")[Hello world]\\n```\\n\" #> attr(,\"class\") #> [1] \"knit_asis\" #> attr(,\"knit_cacheable\") #> [1] NA"},{"path":"https://y-sunflower.github.io/rtyp/reference/is_valid_typst.html","id":null,"dir":"Reference","previous_headings":"","what":"Is valid Typst? — is_valid_typst","title":"Is valid Typst? — is_valid_typst","text":"Check character vector valid Typst markup compiling . error, assumes code valid.","code":""},{"path":"https://y-sunflower.github.io/rtyp/reference/is_valid_typst.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is valid Typst? — is_valid_typst","text":"","code":"is_valid_typst(x, error_on_failure = FALSE)"},{"path":"https://y-sunflower.github.io/rtyp/reference/is_valid_typst.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is valid Typst? — is_valid_typst","text":"x character vector error_on_failure Whether raise error code invalid. Default FALSE.","code":""},{"path":"https://y-sunflower.github.io/rtyp/reference/is_valid_typst.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Is valid Typst? — is_valid_typst","text":"Indicates whether output PDF file exists (example, TRUE, Typst compiled successfully).","code":""},{"path":"https://y-sunflower.github.io/rtyp/reference/is_valid_typst.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Is valid Typst? — is_valid_typst","text":"requires Typst compiler installed. See typst.app/open-source/.","code":""},{"path":"https://y-sunflower.github.io/rtyp/reference/is_valid_typst.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Is valid Typst? — is_valid_typst","text":"","code":"if (FALSE) { # \\dontrun{ typst_code <- c(\"= Hello World\", \"This is a Typst document.\") is_valid_typst(typst_code) # TRUE  typst_code <- c(\"= Hello World\", \"#This is a Typst document.\") is_valid_typst(typst_code) # FALSE  typst_code <- c(\"= Hello World\", \"#This is a Typst document.\") is_valid_typst(typst_code, error_on_failure = TRUE) # ERROR } # }"},{"path":"https://y-sunflower.github.io/rtyp/reference/typst_alignments.html","id":null,"dir":"Reference","previous_headings":"","what":"Typst Alignment — typst_alignments","title":"Typst Alignment — typst_alignments","text":"functions generate special objects representing alignment Typst code. can used arguments functions like text() heading() produce properly formatted Typst code.","code":""},{"path":"https://y-sunflower.github.io/rtyp/reference/typst_alignments.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Typst Alignment — typst_alignments","text":"","code":"# S3 method for class 'typst_alignment' left_align + right_align  horizon  top  bottom  center  left  right"},{"path":"https://y-sunflower.github.io/rtyp/reference/typst_alignments.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Typst Alignment — typst_alignments","text":"object class typst_alignment (inherits typst_expression) length 1. object class typst_alignment (inherits typst_expression) length 1. object class typst_alignment (inherits typst_expression) length 1. object class typst_alignment (inherits typst_expression) length 1. object class typst_alignment (inherits typst_expression) length 1. object class typst_alignment (inherits typst_expression) length 1.","code":""},{"path":"https://y-sunflower.github.io/rtyp/reference/typst_alignments.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Typst Alignment — typst_alignments","text":"left_align typst alignment right_align typst alignment","code":""},{"path":"https://y-sunflower.github.io/rtyp/reference/typst_alignments.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Typst Alignment — typst_alignments","text":"object class typst_alignment.","code":""},{"path":"https://y-sunflower.github.io/rtyp/reference/typst_alignments.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Typst Alignment — typst_alignments","text":"","code":"left #> [1] \"left\" #> attr(,\"class\") #> [1] \"typst_alignment\"  \"typst_expression\" center + horizon #> [1] \"center + horizon\" #> attr(,\"class\") #> [1] \"typst_alignment\"  \"typst_expression\" top + right #> [1] \"top + right\" #> attr(,\"class\") #> [1] \"typst_alignment\"  \"typst_expression\""},{"path":"https://y-sunflower.github.io/rtyp/reference/typst_colors.html","id":null,"dir":"Reference","previous_headings":"","what":"Typst Color — typst_colors","title":"Typst Color — typst_colors","text":"functions generate special objects representing colors Typst code. can used arguments functions like text() heading() produce properly formatted Typst code.","code":""},{"path":"https://y-sunflower.github.io/rtyp/reference/typst_colors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Typst Color — typst_colors","text":"","code":"silver  grey  black  white  navy  blue  aqua  teal  eastern  purple  fuchsia  maroon  red  orange  yellow  olive  green  lime"},{"path":"https://y-sunflower.github.io/rtyp/reference/typst_colors.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Typst Color — typst_colors","text":"object class typst_color (inherits typst_expression) length 1. object class typst_color (inherits typst_expression) length 1. object class typst_color (inherits typst_expression) length 1. object class typst_color (inherits typst_expression) length 1. object class typst_color (inherits typst_expression) length 1. object class typst_color (inherits typst_expression) length 1. object class typst_color (inherits typst_expression) length 1. object class typst_color (inherits typst_expression) length 1. object class typst_color (inherits typst_expression) length 1. object class typst_color (inherits typst_expression) length 1. object class typst_color (inherits typst_expression) length 1. object class typst_color (inherits typst_expression) length 1. object class typst_color (inherits typst_expression) length 1. object class typst_color (inherits typst_expression) length 1. object class typst_color (inherits typst_expression) length 1. object class typst_color (inherits typst_expression) length 1. object class typst_color (inherits typst_expression) length 1. object class typst_color (inherits typst_expression) length 1.","code":""},{"path":"https://y-sunflower.github.io/rtyp/reference/typst_colors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Typst Color — typst_colors","text":"object class typst_color typst_expression.","code":""},{"path":"https://y-sunflower.github.io/rtyp/reference/typst_colors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Typst Color — typst_colors","text":"","code":"red #> [1] \"red\" #> attr(,\"class\") #> [1] \"typst_color\"      \"typst_expression\" blue #> [1] \"blue\" #> attr(,\"class\") #> [1] \"typst_color\"      \"typst_expression\" black #> [1] \"black\" #> attr(,\"class\") #> [1] \"typst_color\"      \"typst_expression\""},{"path":"https://y-sunflower.github.io/rtyp/reference/typst_compile.html","id":null,"dir":"Reference","previous_headings":"","what":"Compile a Typst file or character vector — typst_compile","title":"Compile a Typst file or character vector — typst_compile","text":"Call Typst CLI compiler compile file (.typ) character vector.","code":""},{"path":"https://y-sunflower.github.io/rtyp/reference/typst_compile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compile a Typst file or character vector — typst_compile","text":"","code":"typst_compile(file_or_chr, output = NULL)"},{"path":"https://y-sunflower.github.io/rtyp/reference/typst_compile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compile a Typst file or character vector — typst_compile","text":"file_or_chr Path file (must end \".typ\") character vector. output Optional path output file (default NULL).","code":""},{"path":"https://y-sunflower.github.io/rtyp/reference/typst_compile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compile a Typst file or character vector — typst_compile","text":"Output file path, invisibly.","code":""},{"path":"https://y-sunflower.github.io/rtyp/reference/typst_compile.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Compile a Typst file or character vector — typst_compile","text":"requires Typst compiler installed. See https://typst.app/open-source/","code":""},{"path":"https://y-sunflower.github.io/rtyp/reference/typst_compile.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compile a Typst file or character vector — typst_compile","text":"","code":"if (FALSE) { # \\dontrun{ typst_compile(\"example.typ\")  typst_code <- c(\"= Hello World\", \"This is a Typst document.\") typst_compile(typst_code, output = \"my_output.pdf\") } # }"},{"path":"https://y-sunflower.github.io/rtyp/reference/typst_functions.html","id":null,"dir":"Reference","previous_headings":"","what":"Typst function — typst_functions","title":"Typst function — typst_functions","text":"Generates Typst code element. Named arguments included Typst keyword arguments (e.g. level, numbering), unnamed arguments used heading content. please note behavior might different functions respect true Typst syntax (#table() instance).","code":""},{"path":"https://y-sunflower.github.io/rtyp/reference/typst_functions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Typst function — typst_functions","text":"","code":"assert(...)  bytes(...)  datetime(...)  duration(...)  eval_(...)  panic(...)  regex(...)  repr(...)  str_(...)  symbole(...)  decimal(...)  type(...)  version(...)  place(...)  align(...)  h(...)  v(...)  bibliography(...)  cite(...)  list_(...)  document(...)  emph(...)  figure(...)  footnote(...)  heading(...)  enum(...)  outline(...)  par(...)  parbreak(...)  quote_(...)  strong(...)  table_(...)  text(...)  linebreak(...)  highlight(...)  lower(...)  overline(...)  smallcaps(...)  smartquote(...)  strike(...)  sub_(...)  super(...)  underline(...)  upper(...)  raw_(...)  image(...)  circle(...)  ellipse(...)  line(...)  rect(...)  square(...)"},{"path":"https://y-sunflower.github.io/rtyp/reference/typst_functions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Typst function — typst_functions","text":"... Named unnamed arguments passed Typst function. Named arguments become Typst parameters (e.g. level = 2 → level: 2), unnamed arguments form body inside [...].","code":""},{"path":"https://y-sunflower.github.io/rtyp/reference/typst_functions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Typst function — typst_functions","text":"character string containing generated Typst code.","code":""},{"path":"https://y-sunflower.github.io/rtyp/reference/typst_functions.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Typst function — typst_functions","text":"work yet label type implemented yet. See https://github.com/y-sunflower/rtyp/issues/10","code":""},{"path":[]},{"path":"https://y-sunflower.github.io/rtyp/reference/typst_set.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Typst set rules — typst_set","title":"Create a Typst set rules — typst_set","text":"Generates Typst set rules given function. Named arguments included Typst keyword arguments (e.g. level, numbering), unnamed arguments used heading content.","code":""},{"path":"https://y-sunflower.github.io/rtyp/reference/typst_set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Typst set rules — typst_set","text":"","code":"set_heading(...)  set_text(...)  set_image(...)  set_place(...)"},{"path":"https://y-sunflower.github.io/rtyp/reference/typst_set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Typst set rules — typst_set","text":"... Named unnamed arguments passed Typst function. Named arguments become Typst parameters (e.g. level = 2 → level: 2), unnamed arguments form body inside [...].","code":""},{"path":"https://y-sunflower.github.io/rtyp/reference/typst_set.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Typst set rules — typst_set","text":"character string containing generated Typst code.","code":""},{"path":"https://y-sunflower.github.io/rtyp/reference/typst_set.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Typst set rules — typst_set","text":"","code":"set_heading(level = 2, numbering = \"1.1\") #> [1] \"#set heading(level: 2, numbering: \\\"1.1\\\", none)\" set_text(font=\"Roboto\", size=\"12pt\") #> [1] \"#set text(font: \\\"Roboto\\\", size: \\\"12pt\\\", none)\""},{"path":"https://y-sunflower.github.io/rtyp/reference/typst_units.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Typst Unit Values — typst_units","title":"Create Typst Unit Values — typst_units","text":"functions generate special objects representing units Typst code. can used arguments functions like text() heading() produce properly formatted Typst code.","code":""},{"path":"https://y-sunflower.github.io/rtyp/reference/typst_units.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Typst Unit Values — typst_units","text":"","code":"pt(x)  em(x)  percent(x)  fr(x)  deg(x)"},{"path":"https://y-sunflower.github.io/rtyp/reference/typst_units.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Typst Unit Values — typst_units","text":"x Numeric value unit.","code":""},{"path":"https://y-sunflower.github.io/rtyp/reference/typst_units.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Typst Unit Values — typst_units","text":"object class typst_unit associated unit attribute. passed Typst-generating function, converted appropriate unit string (e.g., 12pt, 1.5em, 80%).","code":""},{"path":"https://y-sunflower.github.io/rtyp/reference/typst_units.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Typst Unit Values — typst_units","text":"","code":"pt(12)       # Represents 12pt #> [1] 12 #> attr(,\"class\") #> [1] \"typst_unit\"       \"typst_expression\" #> attr(,\"unit\") #> [1] \"pt\" em(1.5)      # Represents 1.5em #> [1] 1.5 #> attr(,\"class\") #> [1] \"typst_unit\"       \"typst_expression\" #> attr(,\"unit\") #> [1] \"em\" percent(80)  # Represents 80% #> [1] 80 #> attr(,\"class\") #> [1] \"typst_unit\"       \"typst_expression\" #> attr(,\"unit\") #> [1] \"%\" fr(2)        # Represents 2fr #> [1] 2 #> attr(,\"class\") #> [1] \"typst_unit\"       \"typst_expression\" #> attr(,\"unit\") #> [1] \"fr\"  text(size = pt(12), \"Hello world\") #> [1] \"#text(size: 12pt)[Hello world]\""},{"path":"https://y-sunflower.github.io/rtyp/reference/typst_write.html","id":null,"dir":"Reference","previous_headings":"","what":"Write a Typst file from a character vector or copy an existing one — typst_write","title":"Write a Typst file from a character vector or copy an existing one — typst_write","text":"Create copy Typst file (.typ) either character vector existing .typ file.","code":""},{"path":"https://y-sunflower.github.io/rtyp/reference/typst_write.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write a Typst file from a character vector or copy an existing one — typst_write","text":"","code":"typst_write(file_or_chr, output = NULL)"},{"path":"https://y-sunflower.github.io/rtyp/reference/typst_write.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write a Typst file from a character vector or copy an existing one — typst_write","text":"file_or_chr Path file (must end \".typ\") character vector. output Optional output file path (must end \".typ\"). NULL, temporary .typ file created.","code":""},{"path":"https://y-sunflower.github.io/rtyp/reference/typst_write.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write a Typst file from a character vector or copy an existing one — typst_write","text":"path written .typ file, invisibly.","code":""},{"path":"https://y-sunflower.github.io/rtyp/reference/typst_write.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write a Typst file from a character vector or copy an existing one — typst_write","text":"","code":"if (FALSE) { # \\dontrun{ typst_code <- c(\"# Hello World\", \"This is a Typst document.\") typst_write(typst_code, output = \"hello.typ\") } # }"}]
