[{"path":"https://y-sunflower.github.io/r2typ/articles/r2typ.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Get started","text":"can install :","code":"# install.packages(\"pak\") pak::pkg_install(\"y-sunflower/r2typ\")"},{"path":"https://y-sunflower.github.io/r2typ/articles/r2typ.html","id":"quick-start","dir":"Articles","previous_headings":"","what":"Quick start","title":"Get started","text":"functions accept kind positional named arguments: However, Typst, functions behave way regarding positional named arguments. reason, r2typ automatically adjusts behavior necessary. example, list_() function put everything list format: Note function list_() list() list() base R function. applies table_() function:","code":"library(r2typ) heading(level = 2, \"A title\") #> [1] \"#heading(level: 2)[A title]\"  text(weight = 500, \"Some text\") #> [1] \"#text(weight: 500)[Some text]\" list_(tight = FALSE, \"hey\", \"you\", \"!\") #> [1] \"#list(tight: false, [hey], [you], [!])\" table_(\"hey\", \"you\", \"!\") #> [1] \"#table([hey], [you], [!])\""},{"path":"https://y-sunflower.github.io/r2typ/articles/r2typ.html","id":"typst-units","dir":"Articles","previous_headings":"","what":"Typst units","title":"Get started","text":"Typst uses unique approach units, quoted. r2typ provides several utility functions make working Typst units easy: works Typst units:","code":"text(size = pt(20), \"Ice cream\") #> [1] \"#text(size: 20pt)[Ice cream]\" image(\"image.png\", width = percent(80)) #> [1] \"#image(width: 80%, \\\"image.png\\\")\""},{"path":"https://y-sunflower.github.io/r2typ/articles/r2typ.html","id":"typst-colors","dir":"Articles","previous_headings":"","what":"Typst colors","title":"Get started","text":"Typst offers large set predefined colors red blue. r2typ provides : built-Typst colors available r2typ. can find .","code":"text(fill = green, \"Green text\") #> [1] \"#text(fill: green)[Green text]\""},{"path":"https://y-sunflower.github.io/r2typ/articles/r2typ.html","id":"typst-alignment","dir":"Articles","previous_headings":"","what":"Typst alignment","title":"Get started","text":"Similarly colors, Typst includes specific objects alignment. work well r2typ: can combine mimic Typst syntax: can even combine colors, often useful strokes:","code":"place(   center,   dy = pt(15),   \"hello\" ) #> [1] \"#place(center, dy: 15pt)[hello]\" place(   top + left,   dy = pt(15),   \"hello\" ) #> [1] \"#place(top + left, dy: 15pt)[hello]\" line(stroke = pt(2) + blue) #> [1] \"#line(stroke: 2pt + blue)\""},{"path":"https://y-sunflower.github.io/r2typ/articles/r2typ.html","id":"convert-r-types-to-typst-types","dir":"Articles","previous_headings":"","what":"Convert R types to Typst types","title":"Get started","text":"r2typ converts R types Typst types: NULL becomes none TRUE/FALSE become true/false c() vectors unnamed list() (list(\"\", \"b\") become arrays: Named list() (list(= \"hello\", b = \"world\")) become dictionnaries: Note goal translate R data types equivalent Typst, exhaustive. Typst types still need implemented: label others?","code":"image(\"image.png\", width = percent(80), alt = NULL) #> [1] \"#image(width: 80%, alt: none, \\\"image.png\\\")\" list_(tight = FALSE, \"hey\", \"you\") #> [1] \"#list(tight: false, [hey], [you])\" text(`stylistic-set` = c(1, 2, 3), \"10 years ago\") #> [1] \"#text(stylistic-set: (1, 2, 3))[10 years ago]\"  text(`stylistic-set` = list(1, 2, 3), \"10 years ago\") # equivalent #> [1] \"#text(stylistic-set: (1, 2, 3))[10 years ago]\" text(costs = list(hyphenation = percent(100), runt = percent(100))) #> [1] \"#text(costs: (hyphenation: 100%, runt: 100%))\""},{"path":"https://y-sunflower.github.io/r2typ/articles/r2typ.html","id":"nested-function-calls","dir":"Articles","previous_headings":"","what":"Nested function calls","title":"Get started","text":"Calling function within another function works well:","code":"place(   center + horizon,   dy = pt(15),   square(size = pt(35), fill = red) ) #> [1] \"#place(center + horizon, dy: 15pt)[#square(size: 35pt, fill: red)]\"  page(   flipped = TRUE,   columns = 2,   fill = red,   place(     top + left,     dx = pt(-5),     rect(       fill = blue,       radius = pt(2),       \"yooooo\"     )   ) ) #> [1] \"#page(flipped: true, columns: 2, fill: red)[#place(top + left, dx: -5pt)[#rect(fill: blue, radius: 2pt)[yooooo]]]\""},{"path":"https://y-sunflower.github.io/r2typ/articles/using-r2typ-in-quarto-documents.html","id":"advanced-usage","dir":"Articles","previous_headings":"","what":"Advanced usage","title":"Using r2typ in Quarto documents","text":"r2typ becomes interesting using dynamic values advanced function calls. example, use parameter add inside text square:","code":"--- title: \"{r2typ} demo\" format: typst params:   country: Germany ---  This is a demo of the `{r2typ}` package.  ```{r} library(r2typ) library(glue) ```  ## Complex usage  ```{r} align(   center + horizon,   circle(     width = percent(40),     fill = aqua,     stroke = pt(5) + red,     align(       right,       text(         font = \"Roboto\",         size = em(1.2),         fill = purple,         glue(\"My favorite country is {params$country}\")       )     )   ) ) |>   as_quarto_typst() ```"},{"path":"https://y-sunflower.github.io/r2typ/articles/writing-and-compiling-typst.html","id":"control-file-names","dir":"Articles","previous_headings":"","what":"Control file names","title":"Writing and compiling typst","text":"typst_write() typst_compile() optional output arguments control file names: r2typ also offers is_valid_typst() returns TRUE/FALSE depending code can compiled . Check dedicated vignette.","code":"typst_code <- c(\"= Hello World\", \"This is a Typst document.\") output_file <- typst_write(typst_code, \"here.typ\") typst_compile(output_file, \"report.pdf\")"},{"path":"https://y-sunflower.github.io/r2typ/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Joseph Barbier. Author, maintainer.","code":""},{"path":"https://y-sunflower.github.io/r2typ/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Barbier J (2025). r2typ: R Package Generating Typst Markup. R package version 0.0.6, https://y-sunflower.github.io/r2typ/.","code":"@Manual{,   title = {r2typ: An R Package For Generating Typst Markup},   author = {Joseph Barbier},   year = {2025},   note = {R package version 0.0.6},   url = {https://y-sunflower.github.io/r2typ/}, }"},{"path":"https://y-sunflower.github.io/r2typ/index.html","id":"r2typ-r-to-typst-an-r-package-for-generating-typst-markup","dir":"","previous_headings":"","what":"Generate Typst from R","title":"Generate Typst from R","text":"r2typ lets generate Typst markup using R functions. supports following: ✅ almost Typst functions ✅ conversions R Typst (NULL -> none, TRUE -> true, etc.) ✅ Typst colors, alignment, units direction natively ✅ set rules ✅ works well Quarto ✅ extremely simple syntax ✅ zero dependencies Check documentation. [!WARNING] project still early stage contains bugs.","code":""},{"path":"https://y-sunflower.github.io/r2typ/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Generate Typst from R","text":"","code":"# install.packages(\"pak\") pak::pkg_install(\"y-sunflower/r2typ\")"},{"path":"https://y-sunflower.github.io/r2typ/index.html","id":"quick-start","dir":"","previous_headings":"","what":"Quick start","title":"Generate Typst from R","text":"Basic usage : Functions r2typ accept positional named arguments! means ’re responsible making sure arguments ’re using valid! help process, is_valid_typst() function return either TRUE FALSE depending whether Typst can compiled successfully. Also note examples r2typ documentation valid Typst examples. r2typ converts R types Typst types: NULL becomes none TRUE/FALSE become true/false c() vectors unnamed list() (list(\"\", \"b\") become arrays: Named list() (list(= \"hello\", b = \"world\")) become dictionnaries: just short overview can r2typ! example, also provides functions writing, compiling validating Typst directly R, nested function calls, much ! Learn get started vignette.","code":"library(r2typ)  heading(level = 2, numbering = \"1.1\", \"Hello world\") #> #heading(level: 2, numbering: \"1.1\")[Hello world]  text(size = pt(12), baseline = em(1.2), overhang = FALSE, \"hey there\") #> #text(size: 12pt, baseline: 1.2em, overhang: false)[hey there]  image(width = percent(80), height = \"auto\", \"link.svg\") #> #image(width: 80%, height: auto, \"link.svg\")  circle(fill = blue, \"hey\") #> #circle(fill: blue)[hey]  circle(radius = pt(100), \"hey\", linebreak(), \"there\") #> #circle(radius: 100pt)[hey #linebreak() there]  place(top + left, dy = pt(15), square(size = pt(35), fill = red)) #> #place(top + left, dy: 15pt)[#square(size: 35pt, fill: red)] place(   top + left,   dy = pt(15),   square(size = pt(35), fill = red) ) |>   is_valid_typst() #> TRUE image(\"image.png\", width = percent(80), alt = NULL) #> #image(width: 80%, alt: none, \\\"image.png\\\") list_(tight = FALSE, \"hey\", \"you\") #> #list(tight: false, [hey], [you]) text(`stylistic-set` = c(1, 2, 3), \"10 years ago\") #> #text(stylistic-set: (1, 2, 3))[10 years ago]  text(`stylistic-set` = list(1, 2, 3), \"10 years ago\") # equivalent #> #text(stylistic-set: (1, 2, 3))[10 years ago] text(costs = list(hyphenation = percent(100), runt = percent(100))) #> #text(costs: (hyphenation: 100%, runt: 100%))"},{"path":"https://y-sunflower.github.io/r2typ/index.html","id":"markup-vs-code-mode-in-typst","dir":"","previous_headings":"","what":"Markup VS Code mode in Typst","title":"Generate Typst from R","text":"r2typ generates Typst markup, Typst code. people, writing native Typst, rely primarily markup mode. Code mode mainly used add logic create functions. important distinction keep mind, core difference function calls start # (e.g., #text(\"hey\") VS text(\"hey\")). can learn .","code":""},{"path":"https://y-sunflower.github.io/r2typ/index.html","id":"missing-functions","dir":"","previous_headings":"","what":"Missing functions","title":"Generate Typst from R","text":"✅ Text ✅ Foundations ✅ Model, everything except: cite, link, numbering, ref, terms ✅ Layout, everything except: columns, layout, measure, repeat, rotate ✅ Visualize, everything except: curve, gradient, path, stroke, polygon, tiling something’s missing? Please open issue!","code":""},{"path":"https://y-sunflower.github.io/r2typ/reference/as_quarto_typst.html","id":null,"dir":"Reference","previous_headings":"","what":"Raw blocks for Quarto — as_quarto_typst","title":"Raw blocks for Quarto — as_quarto_typst","text":"Convert raw Typst Quarto. Using function required include output {r2typ} document.","code":""},{"path":"https://y-sunflower.github.io/r2typ/reference/as_quarto_typst.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Raw blocks for Quarto — as_quarto_typst","text":"","code":"as_quarto_typst(x)"},{"path":"https://y-sunflower.github.io/r2typ/reference/as_quarto_typst.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Raw blocks for Quarto — as_quarto_typst","text":"x character vector interpret raw typst.","code":""},{"path":"https://y-sunflower.github.io/r2typ/reference/as_quarto_typst.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Raw blocks for Quarto — as_quarto_typst","text":"raw version, wrapped expected format Quarto document.","code":""},{"path":"https://y-sunflower.github.io/r2typ/reference/as_quarto_typst.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Raw blocks for Quarto — as_quarto_typst","text":"{r2typ} dependency, function tries reproduce behavior knitr::raw_block() Typst outputs.","code":""},{"path":"https://y-sunflower.github.io/r2typ/reference/as_quarto_typst.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Raw blocks for Quarto — as_quarto_typst","text":"","code":"heading(level = 2, numbering = \"1.1\", \"Hello world\") |> as_quarto_typst() #> [1] \"\\n```{=typst}\\n#heading(level: 2, numbering: \\\"1.1\\\")[Hello world]\\n```\\n\" #> attr(,\"class\") #> [1] \"knit_asis\" #> attr(,\"knit_cacheable\") #> [1] NA  typ_markup <- heading(level = 2, numbering = \"1.1\", \"Hello world\") as_quarto_typst(typ_markup) #> [1] \"\\n```{=typst}\\n#heading(level: 2, numbering: \\\"1.1\\\")[Hello world]\\n```\\n\" #> attr(,\"class\") #> [1] \"knit_asis\" #> attr(,\"knit_cacheable\") #> [1] NA"},{"path":"https://y-sunflower.github.io/r2typ/reference/const.html","id":null,"dir":"Reference","previous_headings":"","what":"Functions with brackets. — pos_bracket_functions","title":"Functions with brackets. — pos_bracket_functions","text":"Function positional arguments brackets. Function additional arguments content. example, image() usage must image(height: 2in, \"file.svg\").","code":""},{"path":"https://y-sunflower.github.io/r2typ/reference/const.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Functions with brackets. — pos_bracket_functions","text":"","code":"pos_bracket_functions  no_bracket_functions"},{"path":"https://y-sunflower.github.io/r2typ/reference/const.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Functions with brackets. — pos_bracket_functions","text":"object class character length 3. object class character length 31.","code":""},{"path":"https://y-sunflower.github.io/r2typ/reference/format_as_typst.html","id":null,"dir":"Reference","previous_headings":"","what":"Format into Typst format — format_as_typst","title":"Format into Typst format — format_as_typst","text":"Format x Typst equivalent. function used internally convert R data types equivalent Typst. works recursively.","code":""},{"path":"https://y-sunflower.github.io/r2typ/reference/format_as_typst.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format into Typst format — format_as_typst","text":"","code":"format_as_typst(x, named)"},{"path":"https://y-sunflower.github.io/r2typ/reference/format_as_typst.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format into Typst format — format_as_typst","text":"x object convert. named Whether x named .","code":""},{"path":"https://y-sunflower.github.io/r2typ/reference/format_as_typst.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format into Typst format — format_as_typst","text":"Formatted Typst","code":""},{"path":"https://y-sunflower.github.io/r2typ/reference/format_as_typst.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format into Typst format — format_as_typst","text":"","code":"format_as_typst(c(1, 2, 3)) #> [1] \"(1, 2, 3)\" format_as_typst(list(1, 2, 3)) #> [1] \"(1, 2, 3)\" format_as_typst(list(a=1, b=2, c=3)) #> [1] \"(a: 1, b: 2, c: 3)\" format_as_typst(pt(20)) #> [1] \"20pt\" format_as_typst(TRUE) #> [1] \"true\" format_as_typst(FALSE) #> [1] \"false\" format_as_typst(NULL) #> [1] \"none\" format_as_typst(\"auto\") #> [1] \"auto\""},{"path":"https://y-sunflower.github.io/r2typ/reference/is_valid_typst.html","id":null,"dir":"Reference","previous_headings":"","what":"Is valid Typst? — is_valid_typst","title":"Is valid Typst? — is_valid_typst","text":"Check character vector valid Typst markup compiling . error, assumes code valid.","code":""},{"path":"https://y-sunflower.github.io/r2typ/reference/is_valid_typst.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is valid Typst? — is_valid_typst","text":"","code":"is_valid_typst(x, error_on_failure = FALSE)"},{"path":"https://y-sunflower.github.io/r2typ/reference/is_valid_typst.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is valid Typst? — is_valid_typst","text":"x character vector error_on_failure Whether raise error code invalid. Default FALSE.","code":""},{"path":"https://y-sunflower.github.io/r2typ/reference/is_valid_typst.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Is valid Typst? — is_valid_typst","text":"Indicates whether output PDF file exists (example, TRUE, Typst compiled successfully).","code":""},{"path":"https://y-sunflower.github.io/r2typ/reference/is_valid_typst.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Is valid Typst? — is_valid_typst","text":"requires Typst compiler installed. See typst.app/open-source/.","code":""},{"path":"https://y-sunflower.github.io/r2typ/reference/is_valid_typst.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Is valid Typst? — is_valid_typst","text":"","code":"if (FALSE) { # \\dontrun{ typst_code <- c(\"= Hello World\", \"This is a Typst document.\") is_valid_typst(typst_code) # TRUE  typst_code <- c(\"= Hello World\", \"#This is a Typst document.\") is_valid_typst(typst_code) # FALSE  typst_code <- c(\"= Hello World\", \"#This is a Typst document.\") is_valid_typst(typst_code, error_on_failure = TRUE) # ERROR } # }"},{"path":"https://y-sunflower.github.io/r2typ/reference/parse_typst_args.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse ... arguments — parse_typst_args","title":"Parse ... arguments — parse_typst_args","text":"functions parses user arguments .... goal get arguments named , convert Typst format return list parsed info.","code":""},{"path":"https://y-sunflower.github.io/r2typ/reference/parse_typst_args.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse ... arguments — parse_typst_args","text":"","code":"parse_typst_args(name, ...)"},{"path":"https://y-sunflower.github.io/r2typ/reference/parse_typst_args.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse ... arguments — parse_typst_args","text":"name Name function ... kind named arguments.","code":""},{"path":"https://y-sunflower.github.io/r2typ/reference/parse_typst_args.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse ... arguments — parse_typst_args","text":"list function name, named args unnamed args.","code":""},{"path":"https://y-sunflower.github.io/r2typ/reference/typst_alignments.html","id":null,"dir":"Reference","previous_headings":"","what":"Typst Alignment — typst_alignments","title":"Typst Alignment — typst_alignments","text":"functions generate special objects representing alignment Typst code. can used arguments functions like text() heading() produce properly formatted Typst code.","code":""},{"path":"https://y-sunflower.github.io/r2typ/reference/typst_alignments.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Typst Alignment — typst_alignments","text":"","code":"# S3 method for class 'typst_alignment' left_align + right_align  horizon  top  bottom  center  left  right"},{"path":"https://y-sunflower.github.io/r2typ/reference/typst_alignments.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Typst Alignment — typst_alignments","text":"object class typst_alignment (inherits typst_expression) length 1. object class typst_alignment (inherits typst_expression) length 1. object class typst_alignment (inherits typst_expression) length 1. object class typst_alignment (inherits typst_expression) length 1. object class typst_alignment (inherits typst_expression) length 1. object class typst_alignment (inherits typst_expression) length 1.","code":""},{"path":"https://y-sunflower.github.io/r2typ/reference/typst_alignments.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Typst Alignment — typst_alignments","text":"left_align typst alignment right_align typst alignment","code":""},{"path":"https://y-sunflower.github.io/r2typ/reference/typst_alignments.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Typst Alignment — typst_alignments","text":"object class typst_alignment.","code":""},{"path":"https://y-sunflower.github.io/r2typ/reference/typst_alignments.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Typst Alignment — typst_alignments","text":"","code":"left #> [1] \"left\" #> attr(,\"class\") #> [1] \"typst_alignment\"  \"typst_expression\" center + horizon #> [1] \"center + horizon\" #> attr(,\"class\") #> [1] \"typst_alignment\"  \"typst_expression\" top + right #> [1] \"top + right\" #> attr(,\"class\") #> [1] \"typst_alignment\"  \"typst_expression\""},{"path":"https://y-sunflower.github.io/r2typ/reference/typst_colors.html","id":null,"dir":"Reference","previous_headings":"","what":"Typst Color — typst_colors","title":"Typst Color — typst_colors","text":"functions generate special objects representing colors Typst code. can used arguments functions like text() heading() produce properly formatted Typst code.","code":""},{"path":"https://y-sunflower.github.io/r2typ/reference/typst_colors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Typst Color — typst_colors","text":"","code":"rgb(hex)  silver  grey  black  white  navy  blue  aqua  teal  eastern  purple  fuchsia  maroon  red  orange  yellow  olive  green  lime"},{"path":"https://y-sunflower.github.io/r2typ/reference/typst_colors.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Typst Color — typst_colors","text":"object class typst_color (inherits typst_expression) length 1. object class typst_color (inherits typst_expression) length 1. object class typst_color (inherits typst_expression) length 1. object class typst_color (inherits typst_expression) length 1. object class typst_color (inherits typst_expression) length 1. object class typst_color (inherits typst_expression) length 1. object class typst_color (inherits typst_expression) length 1. object class typst_color (inherits typst_expression) length 1. object class typst_color (inherits typst_expression) length 1. object class typst_color (inherits typst_expression) length 1. object class typst_color (inherits typst_expression) length 1. object class typst_color (inherits typst_expression) length 1. object class typst_color (inherits typst_expression) length 1. object class typst_color (inherits typst_expression) length 1. object class typst_color (inherits typst_expression) length 1. object class typst_color (inherits typst_expression) length 1. object class typst_color (inherits typst_expression) length 1. object class typst_color (inherits typst_expression) length 1.","code":""},{"path":"https://y-sunflower.github.io/r2typ/reference/typst_colors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Typst Color — typst_colors","text":"hex hexadecimal color.","code":""},{"path":"https://y-sunflower.github.io/r2typ/reference/typst_colors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Typst Color — typst_colors","text":"object class typst_color typst_expression.","code":""},{"path":"https://y-sunflower.github.io/r2typ/reference/typst_colors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Typst Color — typst_colors","text":"","code":"rgb(\"#ffffff\") #> [1] \"rgb(\\\"#ffffff\\\")\" #> attr(,\"class\") #> [1] \"typst_color\"      \"typst_expression\" text(font = \"Roboto\", fill = rgb(\"#ffffff\"), \"cookies are healthy!!\") #> [1] \"#text(font: \\\"Roboto\\\", fill: rgb(\\\"#ffffff\\\"))[cookies are healthy!!]\" red #> [1] \"red\" #> attr(,\"class\") #> [1] \"typst_color\"      \"typst_expression\" blue #> [1] \"blue\" #> attr(,\"class\") #> [1] \"typst_color\"      \"typst_expression\" black #> [1] \"black\" #> attr(,\"class\") #> [1] \"typst_color\"      \"typst_expression\""},{"path":"https://y-sunflower.github.io/r2typ/reference/typst_compile.html","id":null,"dir":"Reference","previous_headings":"","what":"Compile a Typst file or character vector — typst_compile","title":"Compile a Typst file or character vector — typst_compile","text":"Call Typst CLI compiler compile file (.typ) character vector. Falls back quarto typst typst unavailable.","code":""},{"path":"https://y-sunflower.github.io/r2typ/reference/typst_compile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compile a Typst file or character vector — typst_compile","text":"","code":"typst_compile(file_or_chr, output = NULL)"},{"path":"https://y-sunflower.github.io/r2typ/reference/typst_compile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compile a Typst file or character vector — typst_compile","text":"file_or_chr Path file (must end \".typ\") character vector. output Optional path output file (default NULL).","code":""},{"path":"https://y-sunflower.github.io/r2typ/reference/typst_compile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compile a Typst file or character vector — typst_compile","text":"Output file path, invisibly.","code":""},{"path":"https://y-sunflower.github.io/r2typ/reference/typst_compile.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Compile a Typst file or character vector — typst_compile","text":"requires Typst compiler installed. See typst.app/open-source/.","code":""},{"path":"https://y-sunflower.github.io/r2typ/reference/typst_direction.html","id":null,"dir":"Reference","previous_headings":"","what":"Typst Direction — typst_direction","title":"Typst Direction — typst_direction","text":"functions generate special objects representing directions Typst. can used arguments functions like stack().","code":""},{"path":"https://y-sunflower.github.io/r2typ/reference/typst_direction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Typst Direction — typst_direction","text":"","code":"ltr  rtl  ttb  btt"},{"path":"https://y-sunflower.github.io/r2typ/reference/typst_direction.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Typst Direction — typst_direction","text":"object class typst_direction (inherits typst_expression) length 1. object class typst_direction (inherits typst_expression) length 1. object class typst_direction (inherits typst_expression) length 1. object class typst_direction (inherits typst_expression) length 1.","code":""},{"path":"https://y-sunflower.github.io/r2typ/reference/typst_direction.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Typst Direction — typst_direction","text":"object class typst_direction typst_expression.","code":""},{"path":"https://y-sunflower.github.io/r2typ/reference/typst_direction.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Typst Direction — typst_direction","text":"","code":"ltr #> [1] \"ltr\" #> attr(,\"class\") #> [1] \"typst_direction\"  \"typst_expression\" rtl #> [1] \"rtl\" #> attr(,\"class\") #> [1] \"typst_direction\"  \"typst_expression\" ttb #> [1] \"ttb\" #> attr(,\"class\") #> [1] \"typst_direction\"  \"typst_expression\" btt #> [1] \"btt\" #> attr(,\"class\") #> [1] \"typst_direction\"  \"typst_expression\""},{"path":"https://y-sunflower.github.io/r2typ/reference/typst_function.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Typst function — typst_function","title":"Create a Typst function — typst_function","text":"Used create Typst functions r2typ. Arguments parsed translated Typst. Generates Typst code element. Named arguments included Typst keyword arguments (e.g. level, numbering), unnamed arguments used heading content. please note behavior might different functions respect true Typst syntax (#table() instance).","code":""},{"path":"https://y-sunflower.github.io/r2typ/reference/typst_function.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Typst function — typst_function","text":"","code":"typst_function(name, ...)  assert(...)  bytes(...)  datetime(...)  duration(...)  eval_(...)  panic(...)  regex(...)  repr(...)  str_(...)  symbol(...)  decimal(...)  type(...)  version(...)  place(...)  align(...)  h(...)  v(...)  block(...)  box(...)  colbreak(...)  stack(...)  grid(...)  hide(...)  pagebreak(...)  move(...)  pad(...)  page(...)  scale_(...)  skew(...)  bibliography(...)  set_list(...)  list_(...)  document(...)  emph(...)  figure(...)  footnote(...)  heading(...)  enum(...)  outline(...)  par(...)  parbreak(...)  quote_(...)  strong(...)  table_(...)  text(...)  linebreak(...)  overline(...)  smallcaps(...)  smartquote(...)  strike(...)  sub_(...)  super(...)  underline(...)  upper(...)  raw_(...)  highlight(...)  lower(...)  image(...)  circle(...)  ellipse(...)  line(...)  rect(...)  square(...)"},{"path":"https://y-sunflower.github.io/r2typ/reference/typst_function.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Typst function — typst_function","text":"name Function name ... Named unnamed arguments passed Typst function. Named arguments become Typst parameters (e.g. level = 2 → level: 2), unnamed arguments form body inside [...].","code":""},{"path":"https://y-sunflower.github.io/r2typ/reference/typst_function.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Typst function — typst_function","text":"character vector well formatted Typst. character string containing generated Typst code.","code":""},{"path":"https://y-sunflower.github.io/r2typ/reference/typst_function.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Typst function — typst_function","text":"","code":"assert(1 < 2, message = \"math broke\") #> [1] \"#assert(message: \\\"math broke\\\", TRUE)\" bytes(\"more cookies...\") #> [1] \"#bytes(\\\"more cookies...\\\")\" datetime(year = 2012, month = 8, day = 3) #> [1] \"#datetime(year: 2012, month: 8, day: 3)\" duration(days = 3, hours = 12) #> [1] \"#duration(days: 3, hours: 12)\" eval_(\"*Markup!*\", mode = \"markup\") #> [1] \"#eval(mode: \\\"markup\\\", \\\"*Markup!*\\\")\" panic(\"this is wrong\") #> [1] \"#panic(\\\"this is wrong\\\")\" regex(\"\\\\d+\") #> [1] \"#regex(\\\"\\\\d+\\\")\" repr(\"hello\") #> [1] \"#repr(\\\"hello\\\")\" str_(\"hello\") #> [1] \"#str(\\\"hello\\\")\" symbol(\"10\") #> [1] \"#symbol(\\\"10\\\")\" decimal(\"10\") #> [1] \"#decimal(\\\"10\\\")\" type(\"10\") #> [1] \"#type(\\\"10\\\")\" version(1, 2, 3, 4) #> [1] \"#version(1, 2, 3, 4)\" version(c(1, 2, 3, 4)) #> [1] \"#version((1, 2, 3, 4))\" place(dx = pt(50), \"pasta\") #> [1] \"#place(dx: 50pt)[pasta]\" align(center + horizon, \"hey\") #> [1] \"#align(center + horizon)[hey]\" h(fr(3)) #> [1] \"#h(\\\"3\\\")\" v(percent(3), weak = TRUE) #> [1] \"#v(weak: true, \\\"3\\\")\" block(breakable = FALSE, width = percent(50), height = \"auto\", fill = aqua, \"cookies\") #> [1] \"#block(breakable: false, width: 50%, height: auto, fill: aqua)[cookies]\" box(clip = FALSE, width = percent(50), height = \"auto\", fill = red, \"ice cream\") #> [1] \"#box(clip: false, width: 50%, height: auto, fill: red)[ice cream]\" colbreak(weak = TRUE) #> [1] \"#colbreak(weak: true)\" stack(dir = ttb, \"hey\", \"you\", \"!\") #> [1] \"#stack(dir: ttb, \\\"hey\\\", \\\"you\\\", \\\"!\\\")\" grid(columns = 2, rows = 2, gutter = pt(3), \"hey\", \"cookies\", \"ice\", \"cream\") #> [1] \"#grid(columns: 2, rows: 2, gutter: 3pt, \\\"hey\\\", \\\"cookies\\\", \\\"ice\\\", \\\"cream\\\")\" hide(\"this is hidden\") #> [1] \"#hide[this is hidden]\" pagebreak(\"this is hidden\") #> [1] \"#pagebreak(\\\"this is hidden\\\")\" move(dx = pt(3), dy = pt(5), \"pasta\") #> [1] \"#move(dx: 3pt, dy: 5pt, \\\"pasta\\\")\" pad(x = percent(0) + pt(5), y = percent(10) + pt(0), image(\"file.svg\")) #> [1] \"#pad(x: 0% + 5pt, y: 10% + 0pt)[#image(\\\"file.svg\\\")]\" page(  flipped = TRUE,  columns = 2,  fill = red,  place(    top + left,    dx = pt(-5),    rect(fill = blue, radius = pt(2), \"yooooo\")  ) ) #> [1] \"#page(flipped: true, columns: 2, fill: red)[#place(top + left, dx: -5pt)[#rect(fill: blue, radius: 2pt)[yooooo]]]\" scale_(x = percent(-100), \"This is mirrored\") #> [1] \"#scale(x: -100%)[This is mirrored]\" skew(ax = deg(-12), \"This is some fake italic text.\") #> [1] \"#skew(ax: -12deg)[This is some fake italic text.]\" bibliography(full = TRUE, \"more cookies...\") #> [1] \"#bibliography(full: true, \\\"more cookies...\\\")\" set_list(tight = TRUE) #> [1] \"#set list(tight: true)\" list_(tight = TRUE, \"I\", \"need\", \"a cat\") #> [1] \"#list(tight: true, [I], [need], [a cat])\" emph(\"please! more cookies...\") #> [1] \"#emph[please! more cookies...]\" figure(alt = \"This is an alternative text\", \"more cookies...\") #> [1] \"#figure(alt: \\\"This is an alternative text\\\", \\\"more cookies...\\\")\" footnote(numbering = \"*\", \"Cheese\") #> [1] \"#footnote(numbering: \\\"*\\\")[Cheese]\" heading(level = 3, \"Intro\", \"More text\") #> [1] \"#heading(level: 3)[Intro More text]\" enum(tight = FALSE, \"I wonder\", \"if\", \"people\", \"will\", \"see\", \"this text\") #> [1] \"#enum(tight: false, [I wonder], [if], [people], [will], [see], [this text])\" outline(depth = 1) #> [1] \"#outline(depth: 1)\" par(  `first-line-indent` = em(1),  spacing = em(0.65),  justify = TRUE,  \"more cookies...\" ) #> [1] \"#par(first-line-indent: 1em, spacing: 0.65em, justify: true)[more cookies...]\"  parbreak() #> [1] \"#parbreak()\" quote_(block = TRUE, \"more cookies...\") #> [1] \"#quote(block: true)[more cookies...]\" strong(\"strong coffee\") #> [1] \"#strong[strong coffee]\" table_(align = center, inset = pt(10), \"a\", \"b\", \"c\", \"d\") #> [1] \"#table(align: center, inset: 10pt, [a], [b], [c], [d])\" text(fill = silver, size = pt(20), \"The most basic function in Typst...\") #> [1] \"#text(fill: silver, size: 20pt)[The most basic function in Typst...]\" linebreak(justify = TRUE) #> [1] \"#linebreak(justify: true)\" overline(evade = FALSE, \"not sure who even uses this function\") #> [1] \"#overline(evade: false)[not sure who even uses this function]\" smallcaps(all = TRUE, \"Niche but useful func\") #> [1] \"#smallcaps(all: true)[Niche but useful func]\" smartquote(double = FALSE) #> [1] \"#smartquote(double: false)\" strike(offset = em(2), \"strike function is kind of cool tbh!\") #> [1] \"#strike(offset: 2em)[strike function is kind of cool tbh!]\" sub_(typographic = FALSE, \"not typographic\") #> [1] \"#sub(typographic: false)[not typographic]\" super(typographic = FALSE, \"not typographic\") #> [1] \"#super(typographic: false)[not typographic]\" underline(stroke = pt(3) + olive, \"what a weird underline\") #> [1] \"#underline(stroke: 3pt + olive)[what a weird underline]\" raw_(\"print('hello world')\", lang = \"python\", block = TRUE) #> [1] \"#raw(lang: \\\"python\\\", block: true, \\\"print('hello world')\\\")\" highlight(extent = pt(3), \"hey\") #> [1] \"#highlight(extent: 3pt)[hey]\" lower(\"hey\") #> [1] \"#lower[hey]\" if (FALSE) image(width = percent(80), height = \"auto\", \"../docs/link.svg\") # \\dontrun{} circle(fill = blue) #> [1] \"#circle(fill: blue)\" ellipse(fill = green) #> [1] \"#ellipse(fill: green)\" line(length = percent(80), angle = deg(20)) #> [1] \"#line(length: 80%, angle: 20deg)\" rect(fill = aqua, radius = pt(3)) #> [1] \"#rect(fill: aqua, radius: 3pt)\" square(size = pt(5), fill = olive) #> [1] \"#square(size: 5pt, fill: olive)\""},{"path":"https://y-sunflower.github.io/r2typ/reference/typst_set.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Typst set rule — typst_set","title":"Create a Typst set rule — typst_set","text":"Used create Typst rules r2typ. Arguments parsed translated Typst. Generates Typst set rules given function.","code":""},{"path":"https://y-sunflower.github.io/r2typ/reference/typst_set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Typst set rule — typst_set","text":"","code":"typst_set(name, ...)  set_place(...)  set_align(...)  set_h(...)  set_v(...)  set_block(...)  set_box(...)  set_colbreak(...)  set_stack(...)  set_grid(...)  set_hide(...)  set_pagebreak(...)  set_move(...)  set_pad(...)  set_page(...)  set_scale(...)  set_skew(...)  set_bibliography(...)  set_document(...)  set_emph(...)  set_figure(...)  set_footnote(...)  set_heading(...)  set_enum(...)  set_outline(...)  set_par(...)  set_parbreak(...)  set_quote(...)  set_strong(...)  set_table(...)  set_text(...)  set_linebreak(...)  set_overline(...)  set_smallcaps(...)  set_smartquote(...)  set_strike(...)  set_sub(...)  set_super(...)  set_underline(...)  set_upper(...)  set_raw(...)  set_highlight(...)  set_lower(...)  set_circle(...)  set_ellipse(...)  set_line(...)  set_rect(...)  set_square(...)"},{"path":"https://y-sunflower.github.io/r2typ/reference/typst_set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Typst set rule — typst_set","text":"name Function name ... Named unnamed arguments passed Typst function. Named arguments become Typst parameters (e.g. level = 2 → level: 2), unnamed arguments form body inside [...].","code":""},{"path":"https://y-sunflower.github.io/r2typ/reference/typst_set.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Typst set rule — typst_set","text":"character vector well formatted Typst. character string containing generated Typst code.","code":""},{"path":"https://y-sunflower.github.io/r2typ/reference/typst_set.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Typst set rule — typst_set","text":"","code":"set_place(dx = pt(50)) #> [1] \"#set place(dx: 50pt)\" set_h(weak = TRUE) #> [1] \"#set h(weak: true)\" set_v(weak = TRUE) #> [1] \"#set v(weak: true)\" set_block(breakable = FALSE, width = percent(50), height = \"auto\", fill = aqua) #> [1] \"#set block(breakable: false, width: 50%, height: auto, fill: aqua)\" set_box(clip = FALSE, width = percent(50), height = \"auto\", fill = red) #> [1] \"#set box(clip: false, width: 50%, height: auto, fill: red)\" set_colbreak(weak = TRUE) #> [1] \"#set colbreak(weak: true)\" set_stack(dir = ttb) #> [1] \"#set stack(dir: ttb)\" set_grid(columns = 2, rows = 2, gutter = pt(3)) #> [1] \"#set grid(columns: 2, rows: 2, gutter: 3pt)\" set_pagebreak(weak = TRUE) #> [1] \"#set pagebreak(weak: true)\" set_move(dx = pt(3), dy = pt(5)) #> [1] \"#set move(dx: 3pt, dy: 5pt)\" set_pad(x = percent(0) + pt(5), y = percent(10) + pt(0)) #> [1] \"#set pad(x: 0% + 5pt, y: 10% + 0pt)\" set_page(  flipped = TRUE,  columns = 2,  fill = red ) #> [1] \"#set page(flipped: true, columns: 2, fill: red)\" set_scale(x = percent(-100)) #> [1] \"#set scale(x: -100%)\" set_skew(ax = deg(-12)) #> [1] \"#set skew(ax: -12deg)\" set_bibliography(full = TRUE) #> [1] \"#set bibliography(full: true)\" set_document(author = \"Me, myself & I\") #> [1] \"#set document(author: \\\"Me, myself & I\\\")\" set_emph() #> [1] \"#set emph()\" set_figure(alt = \"This is an alternative text\") #> [1] \"#set figure(alt: \\\"This is an alternative text\\\")\" set_footnote(numbering = \"*\") #> [1] \"#set footnote(numbering: \\\"*\\\")\" set_heading(level = 3) #> [1] \"#set heading(level: 3)\" set_enum(tight = FALSE) #> [1] \"#set enum(tight: false)\" set_outline(depth = 1) #> [1] \"#set outline(depth: 1)\" set_par(  `first-line-indent` = em(1),  spacing = em(0.65),  justify = TRUE ) #> [1] \"#set par(first-line-indent: 1em, spacing: 0.65em, justify: true)\" set_quote(block = TRUE) #> [1] \"#set quote(block: true)\" set_strong(delta = 400) #> [1] \"#set strong(delta: 400)\" set_table(align = center, inset = pt(10)) #> [1] \"#set table(align: center, inset: 10pt)\" set_text(fill = silver, size = pt(20)) #> [1] \"#set text(fill: silver, size: 20pt)\" set_linebreak(justify = TRUE) #> [1] \"#set linebreak(justify: true)\" set_overline(evade = FALSE) #> [1] \"#set overline(evade: false)\" set_smallcaps(all = TRUE) #> [1] \"#set smallcaps(all: true)\" set_smartquote(double = FALSE) #> [1] \"#set smartquote(double: false)\" set_strike(offset = em(2)) #> [1] \"#set strike(offset: 2em)\" set_sub(typographic = FALSE) #> [1] \"#set sub(typographic: false)\" set_super(typographic = FALSE) #> [1] \"#set super(typographic: false)\" set_underline(stroke = pt(3) + olive) #> [1] \"#set underline(stroke: 3pt + olive)\" set_raw(lang = \"python\", block = TRUE) #> [1] \"#set raw(lang: \\\"python\\\", block: true)\" set_highlight(extent = pt(3)) #> [1] \"#set highlight(extent: 3pt)\" set_circle(fill = blue) #> [1] \"#set circle(fill: blue)\" set_ellipse(fill = green) #> [1] \"#set ellipse(fill: green)\" set_line(length = percent(80), angle = deg(20)) #> [1] \"#set line(length: 80%, angle: 20deg)\" set_rect(fill = aqua, radius = pt(3)) #> [1] \"#set rect(fill: aqua, radius: 3pt)\" set_square(size = pt(5), fill = olive) #> [1] \"#set square(size: 5pt, fill: olive)\""},{"path":"https://y-sunflower.github.io/r2typ/reference/typst_units.html","id":null,"dir":"Reference","previous_headings":"","what":"Typst Unit Values — typst_units","title":"Typst Unit Values — typst_units","text":"functions generate special objects representing units Typst code. can used arguments functions like text() heading() produce properly formatted Typst code.","code":""},{"path":"https://y-sunflower.github.io/r2typ/reference/typst_units.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Typst Unit Values — typst_units","text":"","code":"pt(x)  mm(x)  cm(x)  em(x)  percent(x)  fr(x)  deg(x)  rad(x)"},{"path":"https://y-sunflower.github.io/r2typ/reference/typst_units.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Typst Unit Values — typst_units","text":"x Numeric value unit.","code":""},{"path":"https://y-sunflower.github.io/r2typ/reference/typst_units.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Typst Unit Values — typst_units","text":"object class typst_unit associated unit attribute. passed Typst-generating function, converted appropriate unit string (e.g., 12pt, 1.5em, 80%).","code":""},{"path":"https://y-sunflower.github.io/r2typ/reference/typst_units.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Typst Unit Values — typst_units","text":"","code":"pt(12)       # Represents 12pt #> [1] \"12\" #> attr(,\"class\") #> [1] \"typst_unit\"       \"typst_expression\" #> attr(,\"unit\") #> [1] \"pt\" em(1.5)      # Represents 1.5em #> [1] \"1.5\" #> attr(,\"class\") #> [1] \"typst_unit\"       \"typst_expression\" #> attr(,\"unit\") #> [1] \"em\" percent(80)  # Represents 80% #> [1] \"80\" #> attr(,\"class\") #> [1] \"typst_unit\"       \"typst_expression\" #> attr(,\"unit\") #> [1] \"%\" fr(2)        # Represents 2fr #> [1] \"2\" #> attr(,\"class\") #> [1] \"typst_unit\"       \"typst_expression\" #> attr(,\"unit\") #> [1] \"fr\" rad(3.14)    # Represents 3.14rad #> [1] \"3.14\" #> attr(,\"class\") #> [1] \"typst_unit\"       \"typst_expression\" #> attr(,\"unit\") #> [1] \"rad\"  text(size = pt(12), \"Hello world\") #> [1] \"#text(size: 12pt)[Hello world]\""},{"path":"https://y-sunflower.github.io/r2typ/reference/typst_write.html","id":null,"dir":"Reference","previous_headings":"","what":"Write a Typst file from a character vector or copy an existing one — typst_write","title":"Write a Typst file from a character vector or copy an existing one — typst_write","text":"Create copy Typst file (.typ) either character vector existing .typ file.","code":""},{"path":"https://y-sunflower.github.io/r2typ/reference/typst_write.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write a Typst file from a character vector or copy an existing one — typst_write","text":"","code":"typst_write(file_or_chr, output = NULL)"},{"path":"https://y-sunflower.github.io/r2typ/reference/typst_write.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write a Typst file from a character vector or copy an existing one — typst_write","text":"file_or_chr Path file (must end \".typ\") character vector. output Optional output file path (must end \".typ\"). NULL, temporary .typ file created.","code":""},{"path":"https://y-sunflower.github.io/r2typ/reference/typst_write.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write a Typst file from a character vector or copy an existing one — typst_write","text":"path written .typ file, invisibly.","code":""},{"path":"https://y-sunflower.github.io/r2typ/reference/typst_write.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write a Typst file from a character vector or copy an existing one — typst_write","text":"","code":"if (FALSE) { # \\dontrun{ typst_code <- c(\"= Hello World\", \"This is a Typst document.\") typst_write(typst_code, output = \"hello.typ\") } # }"}]
