[{"path":"https://y-sunflower.github.io/rtyp/articles/rtyp.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Get started","text":"can install :","code":"# install.packages(\"pak\") pak::pkg_install(\"y-sunflower/rtyp\")"},{"path":"https://y-sunflower.github.io/rtyp/articles/rtyp.html","id":"quick-start","dir":"Articles","previous_headings":"","what":"Quick start","title":"Get started","text":"functions accept kind positional named arguments: However, Typst, functions behave way regarding positional named arguments. reason, rtyp adjusts behavior necessary. example, list_() function put everything list format: Note function list_() list() list() base R function. applies table_() function:","code":"library(rtyp) heading(level = 2, \"A title\") #> [1] \"#heading(level: 2)[A title]\"  text(weight = 500, \"Some text\") #> [1] \"#text(weight: 500)[Some text]\" list_(tight = FALSE, \"hey\", \"you\", \"!\") #> [1] \"#list(tight: false, [hey], [you], [!])\" table_(\"hey\", \"you\", \"!\") #> [1] \"#table([hey], [you], [!])\""},{"path":"https://y-sunflower.github.io/rtyp/articles/rtyp.html","id":"typst-units","dir":"Articles","previous_headings":"","what":"Typst units","title":"Get started","text":"Typst uses unique approach units, quoted. rtyp provides several utility functions make working Typst units easy: works Typst units:","code":"text(size = pt(20), \"Ice cream\") #> [1] \"#text(size: 20pt)[Ice cream]\" image(\"image.png\", width = percent(80)) #> [1] \"#image(width: 80%, \\\"image.png\\\")\""},{"path":"https://y-sunflower.github.io/rtyp/articles/rtyp.html","id":"typst-colors","dir":"Articles","previous_headings":"","what":"Typst colors","title":"Get started","text":"Typst offers large set predefined colors red blue. rtyp provides : built-Typst colors available rtyp. can find .","code":"text(fill = green, \"Green text\") #> [1] \"#text(fill: green)[Green text]\""},{"path":"https://y-sunflower.github.io/rtyp/articles/rtyp.html","id":"typst-alignment","dir":"Articles","previous_headings":"","what":"Typst alignment","title":"Get started","text":"Similarly colors, Typst includes specific objects alignment. work well rtyp: can combine mimic Typst syntax: can even combine colors, often useful strokes:","code":"place(   center,   dy = pt(15),   \"hello\" ) #> [1] \"#place(center, dy: 15pt)[hello]\" place(   top + left,   dy = pt(15),   \"hello\" ) #> [1] \"#place(top + left, dy: 15pt)[hello]\" line(stroke = pt(2) + blue) #> [1] \"#line(stroke: 2pt + blue)\""},{"path":"https://y-sunflower.github.io/rtyp/articles/rtyp.html","id":"convert-r-types-to-typst-types","dir":"Articles","previous_headings":"","what":"Convert R types to Typst types","title":"Get started","text":"rtyp converts R types Typst types: NULL becomes none TRUE/FALSE become true/false c() vectors unnamed list() (list(\"\", \"b\") become arrays: Named list() (list(= \"hello\", b = \"world\")) become dictionnaries: Note goal translate R data types equivalent Typst, exhaustive. Typst types still need implemented: label others?","code":"image(\"image.png\", width = percent(80), alt = NULL) #> [1] \"#image(width: 80%, alt: none, \\\"image.png\\\")\" list_(tight = FALSE, \"hey\", \"you\") #> [1] \"#list(tight: false, [hey], [you])\" text(`stylistic-set` = c(1, 2, 3), \"10 years ago\") #> [1] \"#text(stylistic-set: (1, 2, 3))[10 years ago]\"  text(`stylistic-set` = list(1, 2, 3), \"10 years ago\") # equivalent #> [1] \"#text(stylistic-set: (1, 2, 3))[10 years ago]\" text(costs = list(hyphenation = percent(100), runt = percent(100))) #> [1] \"#text(costs: (hyphenation: 100%, runt: 100%))\""},{"path":"https://y-sunflower.github.io/rtyp/articles/rtyp.html","id":"nested-function-calls","dir":"Articles","previous_headings":"","what":"Nested function calls","title":"Get started","text":"Calling function within another function works well:","code":"place(   center + horizon,   dy = pt(15),   square(size = pt(35), fill = red) ) #> [1] \"#place(center + horizon, dy: 15pt)[#square(size: 35pt, fill: red)]\"  page(   flipped = TRUE,   columns = 2,   fill = red,   place(     top + left,     dx = pt(-5),     rect(       fill = blue,       radius = pt(2),       \"yooooo\"     )   ) ) #> [1] \"#page(flipped: true, columns: 2, fill: red)[#place(top + left, dx: -5pt)[#rect(fill: blue, radius: 2pt)[yooooo]]]\""},{"path":"https://y-sunflower.github.io/rtyp/articles/writing-and-compiling-typst.html","id":"control-file-names","dir":"Articles","previous_headings":"","what":"Control file names","title":"Writing and compiling typst","text":"typst_write() typst_compile() optional output arguments control file names: rtyp also offers is_valid_typst() returns TRUE/FALSE depending code can compiled . Check dedicated vignette.","code":"typst_code <- c(\"= Hello World\", \"This is a Typst document.\") output_file <- typst_write(typst_code, \"here.typ\") typst_compile(output_file, \"report.pdf\")"},{"path":"https://y-sunflower.github.io/rtyp/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Joseph Barbier. Author, maintainer.","code":""},{"path":"https://y-sunflower.github.io/rtyp/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Barbier J (2025). rtyp: R Package Generating Typst Markup Code. R package version 0.0.4, https://y-sunflower.github.io/rtyp/.","code":"@Manual{,   title = {rtyp: An R Package For Generating Typst Markup Code},   author = {Joseph Barbier},   year = {2025},   note = {R package version 0.0.4},   url = {https://y-sunflower.github.io/rtyp/}, }"},{"path":"https://y-sunflower.github.io/rtyp/index.html","id":"rtyp-an-r-package-for-generating-typst-markup","dir":"","previous_headings":"","what":"Generate Typst from R","title":"Generate Typst from R","text":"rtyp lets generate Typst markup using R functions. supports following: ✅ almost Typst functions ✅ conversions R Typst (NULL -> none, TRUE -> true, etc.) ✅ Typst colors, alignment, units direction natively ✅ set rules ✅ works well Quarto ✅ extremely simple syntax ✅ zero dependencies Check documentation. [!WARNING] project still early stage contains bugs.","code":""},{"path":"https://y-sunflower.github.io/rtyp/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Generate Typst from R","text":"","code":"# install.packages(\"pak\") pak::pkg_install(\"y-sunflower/rtyp\")"},{"path":"https://y-sunflower.github.io/rtyp/index.html","id":"quick-start","dir":"","previous_headings":"","what":"Quick start","title":"Generate Typst from R","text":"Basic usage : Functions rtyp accept positional named arguments! means ’re responsible making sure arguments ’re using valid! help process, is_valid_typst() function return either TRUE FALSE depending whether Typst can compiled successfully. rtyp converts R types Typst types: NULL becomes none TRUE/FALSE become true/false c() vectors unnamed list() (list(\"\", \"b\") become arrays: Named list() (list(= \"hello\", b = \"world\")) become dictionnaries: just short overview can rtyp! example, also provides functions writing, compiling validating Typst directly R, nested function calls, much ! Learn get started vignette.","code":"library(rtyp)  heading(level = 2, numbering = \"1.1\", \"Hello world\") > #heading(level: 2, numbering: \"1.1\")[Hello world]  text(size = pt(12), baseline = em(1.2), overhang = FALSE, \"hey there\") > #text(size: 12pt, baseline: 1.2em, overhang: false)[hey there]  image(width = percent(80), height = \"auto\", \"link.svg\") > #image(width: 80%, height: auto, \"link.svg\")  circle(fill = blue, \"hey\") > #circle(fill: blue)[hey]  circle(radius = pt(100), \"hey\", linebreak(), \"there\") > #circle(radius: 100pt)[hey #linebreak() there]  place(top + left, dy = pt(15), square(size = pt(35), fill = red)) > #place(top + left, dy: 15pt)[#square(size: 35pt, fill: red)] place(   top + left,   dy = pt(15),   square(size = pt(35), fill = red) ) |>   is_valid_typst() > TRUE image(\"image.png\", width = percent(80), alt = NULL) > #image(width: 80%, alt: none, \\\"image.png\\\") list_(tight = FALSE, \"hey\", \"you\") > #list(tight: false, [hey], [you]) text(`stylistic-set` = c(1, 2, 3), \"10 years ago\") > #text(stylistic-set: (1, 2, 3))[10 years ago]  text(`stylistic-set` = list(1, 2, 3), \"10 years ago\") # equivalent > #text(stylistic-set: (1, 2, 3))[10 years ago] text(costs = list(hyphenation = percent(100), runt = percent(100))) > #text(costs: (hyphenation: 100%, runt: 100%))"},{"path":"https://y-sunflower.github.io/rtyp/index.html","id":"markup-vs-code-mode-in-typst","dir":"","previous_headings":"","what":"Markup VS Code mode in Typst","title":"Generate Typst from R","text":"rtyp generates Typst markup, Typst code. people, writing native Typst, rely primarily markup mode. Code mode mainly used add logic create functions. important distinction keep mind. can learn .","code":""},{"path":"https://y-sunflower.github.io/rtyp/index.html","id":"missing-functions","dir":"","previous_headings":"","what":"Missing functions","title":"Generate Typst from R","text":"✅ Text ✅ Foundations ✅ Model, everything except: cite, link, numbering, ref, terms ✅ Layout, everything except: columns, layout, measure, repeat, rotate ✅ Visualize, everything except: curve, gradient, path, stroke, polygon, tiling something’s missing? Please open issue!","code":""},{"path":"https://y-sunflower.github.io/rtyp/reference/as_raw_typ.html","id":null,"dir":"Reference","previous_headings":"","what":"Raw blocks for Quarto — as_raw_typ","title":"Raw blocks for Quarto — as_raw_typ","text":"Convert raw Typst Quarto. Using function required include output {rtyp} document.","code":""},{"path":"https://y-sunflower.github.io/rtyp/reference/as_raw_typ.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Raw blocks for Quarto — as_raw_typ","text":"","code":"as_raw_typ(x)"},{"path":"https://y-sunflower.github.io/rtyp/reference/as_raw_typ.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Raw blocks for Quarto — as_raw_typ","text":"x character vector interpret raw typst.","code":""},{"path":"https://y-sunflower.github.io/rtyp/reference/as_raw_typ.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Raw blocks for Quarto — as_raw_typ","text":"raw version, wrapped expected format Quarto document.","code":""},{"path":"https://y-sunflower.github.io/rtyp/reference/as_raw_typ.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Raw blocks for Quarto — as_raw_typ","text":"","code":"heading(level = 2, numbering = \"1.1\", \"Hello world\") |> as_raw_typ() #> [1] \"\\n```{=typst}\\n#heading(level: 2, numbering: \\\"1.1\\\")[Hello world]\\n```\\n\" #> attr(,\"class\") #> [1] \"knit_asis\" #> attr(,\"knit_cacheable\") #> [1] NA  typ_markup <- heading(level = 2, numbering = \"1.1\", \"Hello world\") as_raw_typ(typ_markup) #> [1] \"\\n```{=typst}\\n#heading(level: 2, numbering: \\\"1.1\\\")[Hello world]\\n```\\n\" #> attr(,\"class\") #> [1] \"knit_asis\" #> attr(,\"knit_cacheable\") #> [1] NA"},{"path":"https://y-sunflower.github.io/rtyp/reference/is_valid_typst.html","id":null,"dir":"Reference","previous_headings":"","what":"Is valid Typst? — is_valid_typst","title":"Is valid Typst? — is_valid_typst","text":"Check character vector valid Typst markup compiling . error, assumes code valid.","code":""},{"path":"https://y-sunflower.github.io/rtyp/reference/is_valid_typst.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is valid Typst? — is_valid_typst","text":"","code":"is_valid_typst(x, error_on_failure = FALSE)"},{"path":"https://y-sunflower.github.io/rtyp/reference/is_valid_typst.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is valid Typst? — is_valid_typst","text":"x character vector error_on_failure Whether raise error code invalid. Default FALSE.","code":""},{"path":"https://y-sunflower.github.io/rtyp/reference/is_valid_typst.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Is valid Typst? — is_valid_typst","text":"Indicates whether output PDF file exists (example, TRUE, Typst compiled successfully).","code":""},{"path":"https://y-sunflower.github.io/rtyp/reference/is_valid_typst.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Is valid Typst? — is_valid_typst","text":"requires Typst compiler installed. See typst.app/open-source/.","code":""},{"path":"https://y-sunflower.github.io/rtyp/reference/is_valid_typst.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Is valid Typst? — is_valid_typst","text":"","code":"if (FALSE) { # \\dontrun{ typst_code <- c(\"= Hello World\", \"This is a Typst document.\") is_valid_typst(typst_code) # TRUE  typst_code <- c(\"= Hello World\", \"#This is a Typst document.\") is_valid_typst(typst_code) # FALSE  typst_code <- c(\"= Hello World\", \"#This is a Typst document.\") is_valid_typst(typst_code, error_on_failure = TRUE) # ERROR } # }"},{"path":"https://y-sunflower.github.io/rtyp/reference/typst_alignments.html","id":null,"dir":"Reference","previous_headings":"","what":"Typst Alignment — typst_alignments","title":"Typst Alignment — typst_alignments","text":"functions generate special objects representing alignment Typst code. can used arguments functions like text() heading() produce properly formatted Typst code.","code":""},{"path":"https://y-sunflower.github.io/rtyp/reference/typst_alignments.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Typst Alignment — typst_alignments","text":"","code":"# S3 method for class 'typst_alignment' left_align + right_align  horizon  top  bottom  center  left  right"},{"path":"https://y-sunflower.github.io/rtyp/reference/typst_alignments.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Typst Alignment — typst_alignments","text":"object class typst_alignment (inherits typst_expression) length 1. object class typst_alignment (inherits typst_expression) length 1. object class typst_alignment (inherits typst_expression) length 1. object class typst_alignment (inherits typst_expression) length 1. object class typst_alignment (inherits typst_expression) length 1. object class typst_alignment (inherits typst_expression) length 1.","code":""},{"path":"https://y-sunflower.github.io/rtyp/reference/typst_alignments.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Typst Alignment — typst_alignments","text":"left_align typst alignment right_align typst alignment","code":""},{"path":"https://y-sunflower.github.io/rtyp/reference/typst_alignments.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Typst Alignment — typst_alignments","text":"object class typst_alignment.","code":""},{"path":"https://y-sunflower.github.io/rtyp/reference/typst_alignments.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Typst Alignment — typst_alignments","text":"","code":"left #> [1] \"left\" #> attr(,\"class\") #> [1] \"typst_alignment\"  \"typst_expression\" center + horizon #> [1] \"center + horizon\" #> attr(,\"class\") #> [1] \"typst_alignment\"  \"typst_expression\" top + right #> [1] \"top + right\" #> attr(,\"class\") #> [1] \"typst_alignment\"  \"typst_expression\""},{"path":"https://y-sunflower.github.io/rtyp/reference/typst_colors.html","id":null,"dir":"Reference","previous_headings":"","what":"Typst Color — typst_colors","title":"Typst Color — typst_colors","text":"functions generate special objects representing colors Typst code. can used arguments functions like text() heading() produce properly formatted Typst code.","code":""},{"path":"https://y-sunflower.github.io/rtyp/reference/typst_colors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Typst Color — typst_colors","text":"","code":"silver  grey  black  white  navy  blue  aqua  teal  eastern  purple  fuchsia  maroon  red  orange  yellow  olive  green  lime"},{"path":"https://y-sunflower.github.io/rtyp/reference/typst_colors.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Typst Color — typst_colors","text":"object class typst_color (inherits typst_expression) length 1. object class typst_color (inherits typst_expression) length 1. object class typst_color (inherits typst_expression) length 1. object class typst_color (inherits typst_expression) length 1. object class typst_color (inherits typst_expression) length 1. object class typst_color (inherits typst_expression) length 1. object class typst_color (inherits typst_expression) length 1. object class typst_color (inherits typst_expression) length 1. object class typst_color (inherits typst_expression) length 1. object class typst_color (inherits typst_expression) length 1. object class typst_color (inherits typst_expression) length 1. object class typst_color (inherits typst_expression) length 1. object class typst_color (inherits typst_expression) length 1. object class typst_color (inherits typst_expression) length 1. object class typst_color (inherits typst_expression) length 1. object class typst_color (inherits typst_expression) length 1. object class typst_color (inherits typst_expression) length 1. object class typst_color (inherits typst_expression) length 1.","code":""},{"path":"https://y-sunflower.github.io/rtyp/reference/typst_colors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Typst Color — typst_colors","text":"object class typst_color typst_expression.","code":""},{"path":"https://y-sunflower.github.io/rtyp/reference/typst_colors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Typst Color — typst_colors","text":"","code":"red #> [1] \"red\" #> attr(,\"class\") #> [1] \"typst_color\"      \"typst_expression\" blue #> [1] \"blue\" #> attr(,\"class\") #> [1] \"typst_color\"      \"typst_expression\" black #> [1] \"black\" #> attr(,\"class\") #> [1] \"typst_color\"      \"typst_expression\""},{"path":"https://y-sunflower.github.io/rtyp/reference/typst_compile.html","id":null,"dir":"Reference","previous_headings":"","what":"Compile a Typst file or character vector — typst_compile","title":"Compile a Typst file or character vector — typst_compile","text":"Call Typst CLI compiler compile file (.typ) character vector. Falls back quarto typst typst unavailable.","code":""},{"path":"https://y-sunflower.github.io/rtyp/reference/typst_compile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compile a Typst file or character vector — typst_compile","text":"","code":"typst_compile(file_or_chr, output = NULL)"},{"path":"https://y-sunflower.github.io/rtyp/reference/typst_compile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compile a Typst file or character vector — typst_compile","text":"file_or_chr Path file (must end \".typ\") character vector. output Optional path output file (default NULL).","code":""},{"path":"https://y-sunflower.github.io/rtyp/reference/typst_compile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compile a Typst file or character vector — typst_compile","text":"Output file path, invisibly.","code":""},{"path":"https://y-sunflower.github.io/rtyp/reference/typst_compile.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Compile a Typst file or character vector — typst_compile","text":"requires Typst compiler installed. See typst.app/open-source/.","code":""},{"path":"https://y-sunflower.github.io/rtyp/reference/typst_direction.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Typst Direction — typst_direction","title":"Create Typst Direction — typst_direction","text":"functions generate special objects representing directions Typst. can used arguments functions like stack().","code":""},{"path":"https://y-sunflower.github.io/rtyp/reference/typst_direction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Typst Direction — typst_direction","text":"","code":"ltr  rtl  ttb  btt"},{"path":"https://y-sunflower.github.io/rtyp/reference/typst_direction.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Create Typst Direction — typst_direction","text":"object class typst_direction (inherits typst_expression) length 1. object class typst_direction (inherits typst_expression) length 1. object class typst_direction (inherits typst_expression) length 1. object class typst_direction (inherits typst_expression) length 1.","code":""},{"path":"https://y-sunflower.github.io/rtyp/reference/typst_direction.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Typst Direction — typst_direction","text":"object class typst_direction typst_expression.","code":""},{"path":"https://y-sunflower.github.io/rtyp/reference/typst_direction.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Typst Direction — typst_direction","text":"","code":"ltr #> [1] \"ltr\" #> attr(,\"class\") #> [1] \"typst_direction\"  \"typst_expression\" rtl #> [1] \"rtl\" #> attr(,\"class\") #> [1] \"typst_direction\"  \"typst_expression\" ttb #> [1] \"ttb\" #> attr(,\"class\") #> [1] \"typst_direction\"  \"typst_expression\" btt #> [1] \"btt\" #> attr(,\"class\") #> [1] \"typst_direction\"  \"typst_expression\""},{"path":"https://y-sunflower.github.io/rtyp/reference/typst_functions.html","id":null,"dir":"Reference","previous_headings":"","what":"Typst function — typst_functions","title":"Typst function — typst_functions","text":"Generates Typst code element. Named arguments included Typst keyword arguments (e.g. level, numbering), unnamed arguments used heading content. please note behavior might different functions respect true Typst syntax (#table() instance).","code":""},{"path":"https://y-sunflower.github.io/rtyp/reference/typst_functions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Typst function — typst_functions","text":"","code":"assert(...)  bytes(...)  datetime(...)  duration(...)  eval_(...)  panic(...)  regex(...)  repr(...)  str_(...)  symbol(...)  decimal(...)  type(...)  version(...)  place(...)  align(...)  h(...)  v(...)  block(...)  box(...)  colbreak(...)  stack(...)  grid(...)  hide(...)  pagebreak(...)  move(...)  pad(...)  page(...)  scale(...)  skew(...)  bibliography(...)  list_(...)  document(...)  emph(...)  figure(...)  footnote(...)  heading(...)  enum(...)  outline(...)  par(...)  parbreak(...)  quote_(...)  strong(...)  table_(...)  text(...)  linebreak(...)  highlight(...)  lower(...)  overline(...)  smallcaps(...)  smartquote(...)  strike(...)  sub_(...)  super(...)  underline(...)  upper(...)  raw_(...)  image(...)  circle(...)  ellipse(...)  line(...)  rect(...)  square(...)"},{"path":"https://y-sunflower.github.io/rtyp/reference/typst_functions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Typst function — typst_functions","text":"... Named unnamed arguments passed Typst function. Named arguments become Typst parameters (e.g. level = 2 → level: 2), unnamed arguments form body inside [...].","code":""},{"path":"https://y-sunflower.github.io/rtyp/reference/typst_functions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Typst function — typst_functions","text":"character string containing generated Typst code.","code":""},{"path":"https://y-sunflower.github.io/rtyp/reference/typst_functions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Typst function — typst_functions","text":"","code":"assert(1 < 2, message = \"math broke\") #> [1] \"#assert(message: \\\"math broke\\\", TRUE)\" bytes(\"more cookies...\") #> [1] \"#bytes(\\\"more cookies...\\\")\" datetime(year = 2012, month = 8, day = 3) #> [1] \"#datetime(year: 2012, month: 8, day: 3)\" duration(days = 3, hours = 12) #> [1] \"#duration(days: 3, hours: 12)\" eval_(\"*Markup!*\", mode = \"markup\") #> [1] \"#eval(mode: \\\"markup\\\", \\\"*Markup!*\\\")\" panic(\"this is wrong\") #> [1] \"#panic(\\\"this is wrong\\\")\" regex(\"\\\\d+\") #> [1] \"#regex(\\\"\\\\d+\\\")\" repr(\"hello\") #> [1] \"#repr(\\\"hello\\\")\" str_(\"hello\") #> [1] \"#str(\\\"hello\\\")\" symbol(\"10\") #> [1] \"#symbol(\\\"10\\\")\" decimal(\"10\") #> [1] \"#decimal(\\\"10\\\")\" type(\"10\") #> [1] \"#type(\\\"10\\\")\" version(1, 2, 3, 4) #> [1] \"#version(1, 2, 3, 4)\" version(c(1, 2, 3, 4)) #> [1] \"#version((1, 2, 3, 4))\" place(dx = pt(50), \"pasta\") #> [1] \"#place(dx: 50pt)[pasta]\" align(center + horizon, \"hey\") #> [1] \"#align(center + horizon)[hey]\" h(fr(3)) #> [1] \"#h(\\\"3\\\")\" v(percent(3), weak = TRUE) #> [1] \"#v(weak: true, \\\"3\\\")\" block(breakable = FALSE, width = percent(50), height = \"auto\", fill = aqua, \"cookies\") #> [1] \"#block(breakable: false, width: 50%, height: auto, fill: aqua)[cookies]\" box(clip = FALSE, width = percent(50), height = \"auto\", fill = red, \"ice cream\") #> [1] \"#box(clip: false, width: 50%, height: auto, fill: red)[ice cream]\" colbreak(weak = TRUE) #> [1] \"#colbreak(weak: true)\" stack(dir = ttb, \"hey\", \"you\", \"!\") #> [1] \"#stack(dir: ttb, \\\"hey\\\", \\\"you\\\", \\\"!\\\")\" grid(columns = 2, rows = 2, gutter = pt(3), \"hey\", \"cookies\", \"ice\", \"cream\") #> [1] \"#grid(columns: 2, rows: 2, gutter: 3pt, \\\"hey\\\", \\\"cookies\\\", \\\"ice\\\", \\\"cream\\\")\" hide(\"this is hidden\") #> [1] \"#hide[this is hidden]\" pagebreak(\"this is hidden\") #> [1] \"#pagebreak(\\\"this is hidden\\\")\" move(dx = pt(3), dy = pt(5), \"pasta\") #> [1] \"#move(dx: 3pt, dy: 5pt, \\\"pasta\\\")\" pad(x = percent(0) + pt(5), y = percent(10) + pt(0), image(\"file.svg\")) #> [1] \"#pad(x: 0% + 5pt, y: 10% + 0pt)[#image(\\\"file.svg\\\")]\" page(  flipped = TRUE,  columns = 2,  fill = red,  place(    top + left,    dx = pt(-5),    rect(fill = blue, radius = pt(2), \"yooooo\")  ) ) #> [1] \"#page(flipped: true, columns: 2, fill: red)[#place(top + left, dx: -5pt)[#rect(fill: blue, radius: 2pt)[yooooo]]]\" scale(x = percent(-100), \"This is mirrored\") #> [1] \"#scale(x: -100%)[This is mirrored]\" skew(ax = deg(-12), \"This is some fake italic text.\") #> [1] \"#skew(ax: -12deg)[This is some fake italic text.]\" highlight(extent = pt(3), \"hey\") #> [1] \"#highlight(extent: 3pt)[hey]\" lower(\"hey\") #> [1] \"#lower[hey]\" raw_(\"print('hello world')\", lang = \"python\", block = TRUE) #> [1] \"#raw(lang: \\\"python\\\", block: true, \\\"print('hello world')\\\")\""},{"path":"https://y-sunflower.github.io/rtyp/reference/typst_set.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Typst set rules — typst_set","title":"Create a Typst set rules — typst_set","text":"Generates Typst set rules given function. Named arguments included Typst keyword arguments (e.g. level, numbering), unnamed arguments used heading content.","code":""},{"path":"https://y-sunflower.github.io/rtyp/reference/typst_set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Typst set rules — typst_set","text":"","code":"set_heading(...)  set_text(...)  set_image(...)  set_place(...)"},{"path":"https://y-sunflower.github.io/rtyp/reference/typst_set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Typst set rules — typst_set","text":"... Named unnamed arguments passed Typst function. Named arguments become Typst parameters (e.g. level = 2 → level: 2), unnamed arguments form body inside [...].","code":""},{"path":"https://y-sunflower.github.io/rtyp/reference/typst_set.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Typst set rules — typst_set","text":"character string containing generated Typst code.","code":""},{"path":"https://y-sunflower.github.io/rtyp/reference/typst_set.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Typst set rules — typst_set","text":"","code":"set_heading(level = 2, numbering = \"1.1\") #> [1] \"#set heading(level: 2, numbering: \\\"1.1\\\", none)\" set_text(font=\"Roboto\", size=\"12pt\") #> [1] \"#set text(font: \\\"Roboto\\\", size: \\\"12pt\\\", none)\""},{"path":"https://y-sunflower.github.io/rtyp/reference/typst_units.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Typst Unit Values — typst_units","title":"Create Typst Unit Values — typst_units","text":"functions generate special objects representing units Typst code. can used arguments functions like text() heading() produce properly formatted Typst code.","code":""},{"path":"https://y-sunflower.github.io/rtyp/reference/typst_units.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Typst Unit Values — typst_units","text":"","code":"pt(x)  mm(x)  cm(x)  em(x)  percent(x)  fr(x)  deg(x)  rad(x)"},{"path":"https://y-sunflower.github.io/rtyp/reference/typst_units.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Typst Unit Values — typst_units","text":"x Numeric value unit.","code":""},{"path":"https://y-sunflower.github.io/rtyp/reference/typst_units.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Typst Unit Values — typst_units","text":"object class typst_unit associated unit attribute. passed Typst-generating function, converted appropriate unit string (e.g., 12pt, 1.5em, 80%).","code":""},{"path":"https://y-sunflower.github.io/rtyp/reference/typst_units.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Typst Unit Values — typst_units","text":"","code":"pt(12)       # Represents 12pt #> [1] \"12\" #> attr(,\"class\") #> [1] \"typst_unit\"       \"typst_expression\" #> attr(,\"unit\") #> [1] \"pt\" em(1.5)      # Represents 1.5em #> [1] \"1.5\" #> attr(,\"class\") #> [1] \"typst_unit\"       \"typst_expression\" #> attr(,\"unit\") #> [1] \"em\" percent(80)  # Represents 80% #> [1] \"80\" #> attr(,\"class\") #> [1] \"typst_unit\"       \"typst_expression\" #> attr(,\"unit\") #> [1] \"%\" fr(2)        # Represents 2fr #> [1] \"2\" #> attr(,\"class\") #> [1] \"typst_unit\"       \"typst_expression\" #> attr(,\"unit\") #> [1] \"fr\" rad(3.14)    # Represents 3.14rad #> [1] \"3.14\" #> attr(,\"class\") #> [1] \"typst_unit\"       \"typst_expression\" #> attr(,\"unit\") #> [1] \"rad\"  text(size = pt(12), \"Hello world\") #> [1] \"#text(size: 12pt)[Hello world]\""},{"path":"https://y-sunflower.github.io/rtyp/reference/typst_write.html","id":null,"dir":"Reference","previous_headings":"","what":"Write a Typst file from a character vector or copy an existing one — typst_write","title":"Write a Typst file from a character vector or copy an existing one — typst_write","text":"Create copy Typst file (.typ) either character vector existing .typ file.","code":""},{"path":"https://y-sunflower.github.io/rtyp/reference/typst_write.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write a Typst file from a character vector or copy an existing one — typst_write","text":"","code":"typst_write(file_or_chr, output = NULL)"},{"path":"https://y-sunflower.github.io/rtyp/reference/typst_write.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write a Typst file from a character vector or copy an existing one — typst_write","text":"file_or_chr Path file (must end \".typ\") character vector. output Optional output file path (must end \".typ\"). NULL, temporary .typ file created.","code":""},{"path":"https://y-sunflower.github.io/rtyp/reference/typst_write.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write a Typst file from a character vector or copy an existing one — typst_write","text":"path written .typ file, invisibly.","code":""},{"path":"https://y-sunflower.github.io/rtyp/reference/typst_write.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write a Typst file from a character vector or copy an existing one — typst_write","text":"","code":"if (FALSE) { # \\dontrun{ typst_code <- c(\"= Hello World\", \"This is a Typst document.\") typst_write(typst_code, output = \"hello.typ\") } # }"}]
